;; Self test script
;; (loadFile "src/lisp/eval/Verify.jisp")

(resetTestStatistics)
(showBytecode f)
(stopAtFirstFailure f)

(verify 1 1)
(verify 2 2)

(verifyPhase interpreter)

(verify () ())

(verify (+ 2 3) 5)
(setq a 5)
(verify a 5)
(verify (+ a 3) 8)

(verify (if true 1 2) 1)
(verify (if false 1 2) 2)

(verify (* 3 4) 12)
(verify (* 3.0 4) 12.0)
(verify (* 3 4.0) 12.0)
(verify (* 3.0 4.0) 12.0)

(verify (not true) false)
(verify (not false) true)
(verify (not 1) false)
(verify (null null) true)
(verify (null 'foo) false)
(verify (null 0) false)
(verify (null (list)) false)

(verify (sign 1) 1)
(verify (sign -1) -1)
(verify (sign 0) 0)
(verify (sign 2) 1)
(verify (sign -2) -1)

(verify (sign 1.0) 1)
(verify (sign -1.0) -1)
(verify (sign 0.0) 0)
(verify (sign 2.5) 1)
(verify (sign -2.5) -1)

(verify (+) 0)
(verify (*) 1)

(verify (+ 99) 99)
(verify (* 101) 101)
(verify (- 67) -67)
(verify (/ 2) 0.5)

(verify (eval '(+ 1 2 3)) 6)

(verify (classForName "java.lang.System") java.lang.System)

(verify (new "java.lang.Integer" 6) 6)


(verifyError (new "java.lang.Integer" 6.8) "java.lang.reflect.InvocationTargetException")

(verifyError (undefined) "java.lang.IllegalArgumentException")
(verifyError (1234) "java.lang.IllegalArgumentException")

(verifyPhase compile)

(undefine 'foo true)
(undefine 'bar true)
(undefine 'alpha true)

(define foo (x) (not x))
(verify (foo true) false)
(verify (foo false) true)
(verify (foo 2) false)

(verification compileNot
	(define foo (x) (not x))
	(verify (foo true) false)
	(verify (foo false) true)
	(verify (foo 2) false))

(verification emptyAnd
	(define foo (a b) (and))
	(verify (foo 1 2) true))

(verification compiledAnd
	(define foo (a b) (and a b))
	(verify (foo true true) true)
	(verify (foo true false) false)
	(verify (foo false true) false)
	(verify (foo false false) false)
	(verify (foo 1 true) true)
	(verify (foo true 2) 2)
	(verify (foo false 2) false))

(verification compiledPlus
	(define alpha (x)
   		(+ a x 4))

	(verify a 5)
	(verify (alpha 3) 12)

	(setq a 6)
	(verify (alpha 3) 13))

(define foo (x)
	(setq a x))
(foo 3)
(verify a 3)
(foo 5)
(verify a 5)

(verifyPhase logic-a)
(define foo (a b) -99)
(verify (foo 1 2) -99)

(define foo (a b) (if (and a b) 1 2))
(verify (foo true true) 1)
(verify (foo false true) 2)
(verify (foo true false) 2)
(verify (foo false false) 2)

(define foo (a b) (when (and a b) 3))
(verify (foo true true) 3)
(verify (foo false true) null)
(verify (foo true false) null)
(verify (foo false false) null)

(define int:foo (boolean:a boolean:b) (if (and a b) 8 9))
(verify (foo true true) 8)
(verify (foo false true) 9)
(verify (foo true false) 9)
(verify (foo false false) 9)

(undefine 'foo true)

(verifyPhase logic-b)

(define foo (a b) (or))
(verify (foo 1 2) false)

(define foo (a b) (or a b))
(verify (foo true true) true)
(verify (foo true false) true)
(verify (foo false true) true)
(verify (foo false false) false)
(verify (foo 1 true) 1)
(verify (foo true 2) true)
(verify (foo false 2) 2)

(verifyPhase logic-c)

(define foo (a b) (if (or a b) 1 2))
(verify (foo true true) 1)
(verify (foo false true) 1)
(verify (foo true false) 1)
(verify (foo false false) 2)

(define foo (boolean:a boolean:b) (if (and a b) 1 2))
(verify (foo true true) 1)
(verify (foo false true) 2)
(verify (foo true false) 2)
(verify (foo false false) 2)

(verifyPhase logic-d)

(verification ifConstantSymbol
	(define foo () (if 'not 1 2))
	(verify (foo) 1))

(verification whenConstantSymbol
	(define foo () (when 'not 1 2))
	(verify (foo) 2))

(verification unlessNumber
	(define foo () (unless 1 2))
	(verify (foo) null))

(verification unlessConstantSymbol
	(define foo () (unless 'not 1 2))
	(verify (foo) null))

(verification whenNotConstantSymbol
	(define foo () (when (not 'x) 3))
	(verify (foo) null))

(verifyPhase loops)

(define foo (x) (repeat x 3))
(verify (foo 1) false)

(define foo (int:x) (repeat x 3) 7)
(verify (foo 1) 7)

(define foo (x) (repeat x 3) 5)
(verify (foo 1) 7)

(define foo (int:x) (repeat x 3) 5)
(verify (foo 1) 5)

(undefine 'foo true)

(verifyPhase setq)

(define foo (x) (setq a (+ a 1)))
(setq a 0)
(foo 2)
(verify a 1)

(define foo (x) (repeat x (setq a (+ a 1))))
(setq a 0)
(foo 5)
(verify a 5)

(define foo () (dotimes (i 3) 0))
(verify (foo) false)

(define foo () (dotimes (i 3) 0) 5)

(define foo () (quote bar))
(eq (foo) 'bar)

(verifyPhase static)

(verify (> (static "java.lang.System" "currentTimeMillis") 1526859416568) true)

(define foo ()
	(static "java.lang.System" "currentTimeMillis"))

(verify (> (foo) 152685941) true)

(verifyPhase locals)

(define foo (x) (let ((a 1) (b 2)) (+ a b x)))
(verify (foo 3) 6)

(define foo () (let ((a 1) (b 2)) a))
(verify (foo) 1)

(setq a 11)
(setq b 22)
(define foo (x) (let ((a b) (b a)) (if x a b)))
(verify (foo true) 22)
(verify (foo false) 11)

(define foo () (let* ((a b) (b a)) b))
(define bar () (let ((a b) (b a)) b))
(verify (foo) 22)
(verify (bar) 11)

(verifyPhase cond)

(define foo () (cond))
(verify (foo) null)

(define foo (x) (cond (x 1)))
(verify (foo true) 1)
(verify (foo false) null)

(define foo (x) (cond ((= x 1) 'alpha)))
(verify (foo 1) 'alpha)
(verify (foo 2) null)

(define foo (x) (cond ((= x 1) 'alpha) ((= x 2) 'beta) ((= x 3) 'gamma) (true 'delta)))
(verify (foo 1) 'alpha)
(verify (foo 2) 'beta)
(verify (foo 3) 'gamma)
(verify (foo 4) 'delta)
(verify (foo 5) 'delta)

(define foo (x) (cond ((= x 1) 'alpha) ((= x 2) 'beta) ((= x 3) 'gamma)))
(verify (foo 1) 'alpha)
(verify (foo 2) 'beta)
(verify (foo 3) 'gamma)
(verify (foo 4) null)
(verify (foo 5) null)

(verifyPhase types)

(define foo (boolean:x) (cond (x 1)))
(verify (foo true) 1)
(verify (foo false) null)

(verifyPhase factorial)

(undefine 'factorial true)

; This will test compilation of a call to an undefined function.
(define factorial (n)
	(if (<= n 0)
		1
		(* n (factorial (- n 1)))))

(verify (factorial 5) 120)

(define foo (x) (length x))
(verify (foo "foobar") 6)

(verify (+ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) 210)

(define foo ()
	(+ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))
(verify (foo) 210)

(verifyPhase interpretedPrimes)

(undefine 'isprime true)
(undefine 'collectPrimes true)
(undefine 'size true)
(undefine 'add true)

(def isprime (a)
  (let ((b 2)
  		(result true))
    (while (and (<= (* b b) a) result)
      (if (zerop (rem a b))
      	  (setq result false)
      	  (setq b (1+ b))))
    result))

(def collectPrimes (n)
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (when (isprime i) (add result i))
        (setq i (1+ i)))
      result))

(verify (collectPrimes 10) '(2 3 5 7 11 13 17 19 23 29 31))

(verifyPhase primeConstructs)

(define foo (a) (let ((b (+ a 2))) b))
(verify (foo 4) 6)

(define foo (x)
  (let ((result 0))
	(setq result (* x x))
	result))
(verify (foo 3) 9)
(verify (foo 4) 16)

(define foo ()
   (let ((b 5))
	(setq b 7)
	b))
(verify (foo) 7)

(define foo ()
   (let ((b 5))
	(1+ 98)))
(verify (foo) 99)

(define foo (x)
   (let ((b 42))
	(1+ x)))
(verify (foo 34) 35)

(define foo ()
   (let ((b 42))
	(1+ b)))
(verify (foo) 43)

(define foo (x)
   (let ((b 5))
	(setq x (1+ x))
	x))
(verify (foo 17) 18)

(define foo (x)
   (let ((b 5))
	(setq x (1+ 99))
	x))
(verify (foo 17) 100)

(define foo () (let ((b 5)) (setq bb (1+ 99))))
(define foo () (let ((b 5)) (setq b (1+ 99))))

(define foo ()
   (let ((b 5))
	(setq b (1+ 99))
	b))
(verify (foo) 100)

(define foo ()
   (let ((b 2))
	(setq b (1+ b))))
(verify (foo) 3)

(define foo ()
   (let ((b 5))
	(setq b (1+ b))
	b))
(verify (foo) 6)

(define foo (n)
 (let ((i 2) (result (list)))
	(while (< (size result) n)
   		(add result i))
	result))
(verify (foo 4) '(2 2 2 2))

(verifyPhase optimizeInteger)

(define foo () (incr 4))

(verify (foo) 5)

(define foo (a b)
	(rem a b))

(verify (foo 11 4) 3)

(verification dummyIsprime
	(define isprime (a) 99)
	(verify (isprime 2) 99))

(verification dummyCollectPrimes
	(define collectPrimes (a) 93)
	(verify (collectPrimes 2) 93))

(verifyPhase primes)

; Now do it compiled
(define isprime (a)
  (let ((b 2)
  		(result true))
    (while (and (<= (* b b) a) result)
      (if (zerop (rem a b))
      	  (setq result false)
      	  (setq b (1+ b))))
    result))

(define collectPrimes (n)
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (when (isprime i) (add result i))
        (setq i (1+ i)))
      result))

(verify (collectPrimes 10) '(2 3 5 7 11 13 17 19 23 29 31))

(verifyPhase primesConditions)

(undefine 'foo true);

(define foo (x) (when x 1 2))
(verify (foo 1) 2)
(verify (foo 'bar) 2)
(verify (foo null) 2)
(verify (foo true) 2)
(verify (foo false) null)

(define foo (x) (unless x 1 2))
(verify (foo 1) null)
(verify (foo 'bar) null)
(verify (foo null) null)
(verify (foo true) null)
(verify (foo false) 2)

(define foo () (if 'foo 1  2))
(verify (foo) 1)

(define int:foo () 5)
(verify (foo) 5)

;(setq system.showBytecode false)
(define int:foo (int:n) n)
(verify (foo 3) 3)
(verify (foo 5) 5)


(verifyPhase primesCompileBug)

(verification isPrimeAgain
 (define isprime (a)
  (let ((b 2)
  		(result true))
    (while (and (<= (* b b) a) result)
      (if (zerop (rem a b))
      	  (setq result false)
      	  (setq b (1+ b))))
    result))
    ;; Test cases
    (verify (isprime 5) true)
    (verify (isprime 11) true)
    (verify (isprime 37) true)
    (verify (isprime 81) false)
    (verify (isprime 256) false))

(verification collectPrimesAgain
	(define ccc (n)
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (when (isprime i) (add result i))
        (setq i (1+ i)))
      result))
	(verify (ccc 4) '(2 3 5 7 11))
	(verify (ccc 1) '(2 3))
	(verify (ccc 6) '(2 3 5 7 11 13 17)))


(verification collectPrimesUsingIf
	(define ccc (n)
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (if (isprime i) (add result i))	; if instead of when here
        (setq i (1+ i)))
      result))
	(verify (ccc 4) '(2 3 5 7 11))
	(verify (ccc 1) '(2 3))
	(verify (ccc 6) '(2 3 5 7 11 13 17)))

(verification collectPrimesUsingUnlessNot
  (define ccc (n)
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (unless (not (isprime i)) (add result i))
        (setq i (1+ i)))
      result))
	(verify (ccc 4) '(2 3 5 7 11))
	(verify (ccc 1) '(2 3))
	(verify (ccc 6) '(2 3 5 7 11 13 17)))

;(define ccc (n)
;	(when (isprime n)
;		(printf "prime")))


(define collectPrimes (n); bad
;; This is an infinite loop
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (when (not true) ;(isprime i)
        	(add result i)
        	)
        (setq i (1+ i))
        )
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2) (result (list)))
      (while (<= (size result) n)
        (when (bahbab true) ;(isprime i)
        	(add result i)
        	)
        (setq i (1+ i))
        )
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2) (result (list)))
      (progn (<= (size result) n)
        (when (bahbab true) ;(isprime i)
        	(add result i)
        	)
        (setq i (1+ i))
        )
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2) (result (list)))
      (<= (size result) n)
      (when (bahbab true) ;(isprime i)
        	(add result i)
        	)
      (setq i (1+ i))
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2) (result (list)))
      (<= (size result) n)
      (when (bahbab true) ;(isprime i)
        	(add result i)
        	)
      ;(setq i (1+ i))
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2) (result (list)))
      (when (bahbab true) ;(isprime i)
        	(add result i)
        	)
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let* ((i 2) (result (list)))
      (when (bahbab true)
        	(add result i)
        	)
      result))

 (define collectPrimes (n); bad
 ;; Reference to undefined function
    (let* ((i 2) (result (list)))
      (when (bahbab true)
        	3
        	)
      result))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2)
    	  ;(result (list))
    	 )
      (when (bahbab true)
        	3
        	)
      4))

(define collectPrimes (n); bad
 ;; Reference to undefined function
    (let ((i 2)
    	 )
      (when (bahbab true)
        	3
        	)
      4))

(define collectPrimes (n); bad
 ;; Reference to undefined function
      (when (bahbab true)
        	3
        	)
      4)
(define collectPrimes (n); bad
 ;; Reference to undefined variable
      (when jjsajas
        	3
        	)
      4)

(define collectPrimes (n); ok
      (when false
        	3
        	)
      4)

(define collectPrimes (n); ok
      (when true
        	3
        	)
      4)

(define collectPrimes (n); ok
      (when 44
        	3
        	)
      4)

(define collectPrimes (n); OK
    (when (bahbab true)
        	3
        	))

(sleep 0.2)
(printTestStatistics)

; And quit
(verifyPhase verifyComplete)


