;; Self test script
;; (loadFile "src/lisp/eval/VerifyConvert.jisp")

(resetTestStatistics)

(verify 1 1)
(verify 2 2)

;(setq system.showBytecode t)

(define foo (int:a) a)

(verify (foo 1) 1)
(verify (foo -2) -2)
(verify (foo 3) 3)

(define foo (double:a) a)
(verify (foo 1) 1.0)
(verify (foo -2) -2.0)
(verify (foo 3) 3.0)
(verify (foo 3.5) 3.5)

(verify (getName (getClass (the byte 2))) "java.lang.Byte")
(verify (getName (getClass (the short 4))) "java.lang.Short")
(verify (getName (getClass (the int 4))) "java.lang.Integer")
(verify (getName (getClass (the long 4))) "java.lang.Long")
(verify (getName (getClass (the float 4))) "java.lang.Float")
(verify (getName (getClass (the double 4))) "java.lang.Double")

(define int:foo (int:a) a)

(verify (foo 1) 1)
(verify (foo -2) -2)
(verify (foo 3) 3)

(define long:foo (int:a) a)

(verify (foo 1) 1)
(verify (foo -2) -2)
(verify (foo 3) 3)

;; Verify very simple cases of returning typed values
(define foo () byte:3)
(verify (foo) 3)

(define foo () short:4)
(verify (foo) 4)

(define foo () int:5)
(verify (foo) 5)

(define foo () long:6)
(verify (foo) 6)

; Float conversion issues
(define foo () float:2.1)
(verify (foo) (the float 2.1))
(verify (> (foo) 2.09))
(verify (< (foo) 2.101))

(define foo () double:2.2)
(verify (foo) 2.2)

;; Now declare the return type too
(define byte:foo () byte:3)
(verify (foo) 3)

(define short:foo () short:4)
(verify (foo) 4)

(define int:foo () int:5)
(verify (foo) 5)

(define long:foo () long:6)
(verify (foo) 6)

; Float conversion issues
(define float:foo () float:2.1)
(verify (foo) (the float 2.1))
(verify (> (foo) 2.09))
(verify (< (foo) 2.101))

(define double:foo () double:2.2)
(verify (foo) 2.2)

; Now change type on return
(define int:foo () byte:3)
(verify (foo) 3)
; Note: narrowing does not work
(define short:foo () byte:4)
(verify (foo) 4)
(define long:foo () byte:5)
(verify (foo) 5)
(define float:foo () byte:6)
(verify (foo) 6)
(define double:foo () byte:7)
(verify (foo) 7)

; Use short inside
(define int:foo () short:3)
(verify (foo) 3)
; Note: narrowing does not work
(define short:foo () short:4)
(verify (foo) 4)
(define long:foo () short:5)
(verify (foo) 5)
(define float:foo () short:6)
(verify (foo) 6)
(define double:foo () short:7)
(verify (foo) 7)

; Use int inside
(define int:foo () int:3)
(verify (foo) 3)
; Note: narrowing does not work
;(define short:foo () int:4)
;(verify (foo) 4)
(define long:foo () int:5)
(verify (foo) 5)
(define float:foo () int:6)
(verify (foo) 6)
(define double:foo () int:7)
(verify (foo) 7)

; Use long inside
(define long:foo () long:5)
(verify (foo) 5)
(define float:foo () long:6)
(verify (foo) 6)
(define double:foo () long:7)
(verify (foo) 7)


(sleep 0.2)
(printTestStatistics)

; And quit
(exit)

(define foo (a b)
	(setq b a)
	(list a b))
	
(define foo (a int:b)
	(setq b a)
	(list a b))
	
(define foo (int:a int:b)
	(setq b a)
	(list a b))
	
(define foo (int:a b)
	(setq b a)
	(list a b))
	
(define foo (short:a int:b)
	(setq b a))

(sleep 0.2)
(printTestStatistics)

; And quit
(exit)
